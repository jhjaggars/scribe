name: Cross-Platform Tests

on:
  push:
    branches: [ main, windows-packaging ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce CI load - test fewer combinations on non-Linux
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg portaudio19-dev libcairo2-dev libgirepository1.0-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg portaudio
    
    - name: Install uv
      run: |
        pip install uv
        uv --version
    
    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync
      
    - name: Install GTK dependencies (Linux/macOS only)
      if: matrix.os != 'windows-latest'
      run: |
        uv sync --extra gtk || echo "GTK dependencies failed to install"
    
    - name: Install optional Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # On Windows, sounddevice should work
        uv add sounddevice
      continue-on-error: true
    
    - name: Lint with ruff (if available)
      run: |
        uv add --dev ruff
        uv run ruff check src/ --output-format=github
      continue-on-error: true
    
    - name: Test Python syntax
      run: |
        python -m py_compile src/scribe/main.py
        python -m py_compile src/scribe/gui.py
        python -m py_compile src/scribe/gui_windows.py
    
    - name: Test imports
      run: |
        uv run python -c "from src.scribe.main import main; print('✓ Main module imports successfully')"
        uv run python -c "import sys; sys.path.insert(0, 'src'); from scribe.main import SOUNDDEVICE_AVAILABLE; print(f'SOUNDDEVICE_AVAILABLE: {SOUNDDEVICE_AVAILABLE}')"
    
    - name: Test CLI help
      run: |
        uv run scribe --help
    
    - name: Test Windows-specific features
      if: matrix.os == 'windows-latest'
      run: |
        # Test Windows audio recorder import
        uv run python -c "import sys; sys.path.insert(0, 'src'); from scribe.main import WindowsAudioRecorder, SOUNDDEVICE_AVAILABLE; print(f'Windows audio available: {SOUNDDEVICE_AVAILABLE}')"
        
        # Test Windows GUI import
        uv run python -c "import sys; sys.path.insert(0, 'src'); from scribe.gui_windows import ScribeWindowsGUI; print('✓ Windows GUI imports successfully')"
      continue-on-error: true
    
    - name: Test GTK GUI import (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        # GTK might not be available in CI, but test the import structure
        uv run python -c "import sys; sys.path.insert(0, 'src'); print('Testing GTK GUI import...')"
      continue-on-error: true
    
    - name: Test audio functionality (basic)
      run: |
        # Run our Windows audio test script
        uv run python test_windows_audio.py
      continue-on-error: true
      timeout-minutes: 2
    
    - name: Test PyInstaller compatibility
      if: matrix.os == 'windows-latest'
      run: |
        uv add --dev pyinstaller
        # Test that PyInstaller can analyze the main script
        uv run pyinstaller --onefile --name test-scribe src/scribe/main.py --dry-run
      continue-on-error: true
    
    - name: Test package installation
      run: |
        # Test that the package can be built and installed
        uv build
        ls -la dist/
      continue-on-error: true

  integration-test:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        pip install uv
        uv sync
        uv add --dev pyinstaller
    
    - name: Quick integration test - Build small executable
      run: |
        # Create a minimal test executable to verify PyInstaller works
        echo 'print("Scribe test executable works!")' > test_script.py
        uv run pyinstaller --onefile test_script.py
        ./dist/test_script.exe
        
        Write-Host "✓ PyInstaller integration test passed"
      shell: pwsh
    
    - name: Test spec files syntax
      run: |
        # Verify our spec files are valid Python
        python -m py_compile scribe-cli.spec
        python -m py_compile scribe-gui-windows.spec
        Write-Host "✓ PyInstaller spec files are valid"
      shell: pwsh